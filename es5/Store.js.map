{"version":3,"sources":["../es2016/Store.js"],"names":["Store","state","_boundStates","maxHistoryLength","onChangeCallbacks","__anyChange","__time","Date","now","stateHistory","concat","length","slice","stateParent","mapping","forward","push","boundState","mapper","forwardState","index","boundStates","i","splice","receivingStateParent","newState","receivingKeys","Object","keys","forEach","key","mappedKey","indexOf","setState","info","historyMode","oldState","assign","changes","getChangeList","trimHistory","o","property","newProperty","oldProperty","_triggerChangeCallbacks","forwardToBoundStates","callback","undefined","console","error","callbackList","pull","newValue","oldValue","fullHistory","getFullHistory","getChangeLog","join","isNew","log","map"],"mappings":"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","file":"Store.js","sourcesContent":["/**\r\n * Created by sam_g on 2/7/2017.\r\n */\r\nimport _ from 'lodash';\r\nimport areEqual from 'fbjs/lib/areEqual';\r\n/** Simple data store with history recording and on change callbacks */\r\nexport class Store {\r\n    /***\r\n     * Creates a store and sets its initial state to the optional value passed in\r\n     * @param state\r\n     */\r\n    constructor(state) {\r\n        /***\r\n         *\r\n         * @ignore\r\n         * @type {any[]}\r\n         * @private\r\n         */\r\n        this._boundStates = [];\r\n        this.maxHistoryLength = 32;\r\n        /** @private {function[]} */\r\n        this.onChangeCallbacks = {\r\n            __anyChange: []\r\n        };\r\n        /** @property {object} [state={}] state - An object that represents the present state */\r\n        this.state = state || {};\r\n        /** @private */\r\n        this.state.__time = Date.now();\r\n        /** @private An array of states from the first to the last, excluding the present state */\r\n        this.stateHistory = [];\r\n    }\r\n    /**\r\n     * Get an array of states from the first to the last\r\n     * @return {object[]} An array of states\r\n     */\r\n    getFullHistory() {\r\n        return _.concat(this.stateHistory, [this.state]);\r\n    }\r\n    /**\r\n     * Trims the history down to the last 'x' number of entries\r\n     * @param {number} length - max number of state history entries\r\n     */\r\n    trimHistory(length = 32) {\r\n        this.stateHistory = this.stateHistory.slice(-length);\r\n    }\r\n    /***\r\n     * Automaticly updates the state of stateParent\r\n     * @example <caption>Binding to a React component</caption>\r\n     * componentDidMount(){\r\n     *     // Don't forget to unbind on unmount\r\n     *     mainStore.bindState(this);\r\n     * }\r\n     * @param stateParent\r\n     * @param {function} mapping - (string)=>string\r\n     * @param {boolean} forward\r\n     */\r\n    bindState(stateParent, mapping, forward = true) {\r\n        this._boundStates.push({ boundState: stateParent, mapper: mapping });\r\n        if (forward)\r\n            this.forwardState(stateParent);\r\n    }\r\n    /***\r\n     * Unbinds the state of stateParent\r\n     * @example <caption>Unbinding to a React component</caption>\r\n     * componentWillUnmount(){\r\n     *     mainStore.unbindState(this);\r\n     * }\r\n     * @param stateParent\r\n     */\r\n    unbindState(stateParent) {\r\n        let index = -1;\r\n        let boundStates = this._boundStates;\r\n        for (let i = 0; i < boundStates.length; i++) {\r\n            if (boundStates[i].boundState === stateParent)\r\n                index = i;\r\n        }\r\n        if (index > -1) {\r\n            boundStates.splice(index, 1);\r\n        }\r\n    }\r\n    forwardState(receivingStateParent, mapping) {\r\n        // the new state that will be transferred to the receiving state\r\n        let newState = {};\r\n        let receivingKeys = Object.keys(receivingStateParent.state);\r\n        // Loop through all of the values in this store's state\r\n        Object.keys(this.state).forEach((key) => {\r\n            // Map the sender's key to the receiver\r\n            let mappedKey = mapping ? mapping(key) : key;\r\n            // If the mappedKey can be found in the receiver add the value to the new state\r\n            if (receivingKeys.indexOf(mappedKey) != -1)\r\n                newState[mappedKey] = this.state[key];\r\n        });\r\n        // Send the new state to the receiving store\r\n        receivingStateParent.setState(newState);\r\n    }\r\n    forwardToBoundStates() {\r\n        this._boundStates.forEach(info => this.forwardState(info.boundState, info.mapper));\r\n    }\r\n    /**\r\n     * Get the previous state of the store\r\n     * @return {object} previous state\r\n     */\r\n    getPreviousState() {\r\n        let index = this.stateHistory.length - 1;\r\n        return this.stateHistory[index];\r\n    }\r\n    /**\r\n     * Set the store's state and optionally save the last state to history\r\n     * @param {object} newState\r\n     * @param {boolean} historyMode\r\n     * @example <caption>Set state and record previous state to history</caption>\r\n     * myStore.setState({userName: \"John Doe\"});\r\n     * @example <caption>Set state and forget about recording previous state to history</caption>\r\n     * myStore.setState({userName: \"Billy Bob\", false});\r\n     */\r\n    setState(newState, historyMode = true) {\r\n        // Save the old state\r\n        let oldState = this.state;\r\n        // Update the state\r\n        this.state = _.assign({}, oldState, newState);\r\n        let changes = Store.getChangeList(oldState, this.state);\r\n        this.trimHistory(this.maxHistoryLength);\r\n        // Loop through list of changes and trigger their respective callbacks\r\n        changes.forEach((o) => {\r\n            // Get the name of the changed property\r\n            let { property } = o;\r\n            // Get the new and old values of the property\r\n            let newProperty = this.state[property];\r\n            let oldProperty = oldState[property];\r\n            // Trigger the property's callback\r\n            this._triggerChangeCallbacks(property, newProperty, oldProperty);\r\n        });\r\n        if (changes.length) {\r\n            //\r\n            this.state.__time = Date.now();\r\n            if (historyMode == true) {\r\n                this.stateHistory.push(oldState);\r\n            }\r\n            this._triggerChangeCallbacks(\"__anyChange\", this.state, oldState);\r\n            this.forwardToBoundStates();\r\n        }\r\n    }\r\n    /**\r\n     * Subscribe to changes in the state\r\n     * @param {function(newValue: *, oldValue: *)} callback\r\n     * @param {string} property - Name of the property to watch\r\n     * @example <caption>Trigger callback when userName is updated</caption>\r\n     * myStore.subscribeToChanges((newVal)=>{ console.log(\"userName changed to...\", newVal)}, \"userName\");\r\n     */\r\n    subscribeToChanges(callback, property = \"__anyChange\") {\r\n        if (this.onChangeCallbacks[property] == undefined)\r\n            this.onChangeCallbacks[property] = [];\r\n        if (typeof callback != \"function\") {\r\n            console.error(\"Callback given is not a function as expected\");\r\n        }\r\n        else {\r\n            this.onChangeCallbacks[property].push(callback);\r\n        }\r\n    }\r\n    /**\r\n     * Remove subscription to changes in the state\r\n     * @param {function} callback\r\n     * @param {string} property - Name of the property to unsubscribe from\r\n     */\r\n    unSubscribeToChanges(callback, property = \"__anyChange\") {\r\n        let callbackList = this.onChangeCallbacks[property];\r\n        if (callbackList == undefined)\r\n            return;\r\n        this.onChangeCallbacks[property] = _.pull(callbackList, callback);\r\n    }\r\n    /**\r\n     *\r\n     * @param {object} oldState\r\n     * @param {object} newState\r\n     * @return {Array}\r\n     */\r\n    static getChangeList(oldState, newState) {\r\n        // Loop through state properties looking for changes\r\n        let changes = [];\r\n        for (let property in newState) {\r\n            let newProperty = newState[property];\r\n            let oldProperty = oldState[property];\r\n            if (property == \"__time\")\r\n                continue;\r\n            // Generate change list\r\n            if (!areEqual(newProperty, oldProperty)) {\r\n                changes.push({\r\n                    property: property,\r\n                    isNew: oldProperty == undefined || oldProperty == null\r\n                });\r\n            }\r\n        }\r\n        return changes;\r\n    }\r\n    /**\r\n     * Returns difference between two states in human readable form\r\n     * @param {object} oldState\r\n     * @param {object} newState\r\n     * @return {string}\r\n     */\r\n    static getChangeLog(oldState, newState) {\r\n        let changes = this.getChangeList(oldState, newState);\r\n        let log = changes.map((o) => {\r\n            if (o.isNew)\r\n                return `Added new property \"${o.property}\"`;\r\n            else\r\n                return `Changed value of \"${o.property}\"`;\r\n        });\r\n        return log.join(\"\\n\");\r\n    }\r\n    // TODO: Should this be private\r\n    /***\r\n     *\r\n     * @ignore\r\n     * @param property\r\n     * @param newValue\r\n     * @param oldValue\r\n     * @private\r\n     */\r\n    _triggerChangeCallbacks(property, newValue, oldValue) {\r\n        if (!this.onChangeCallbacks[property])\r\n            return;\r\n        this.onChangeCallbacks[property].forEach((callback) => callback(newValue, oldValue, property));\r\n    }\r\n    /**\r\n     * Returns change log of entire history in human readable form\r\n     * @return {string}\r\n     */\r\n    getChangeLog() {\r\n        let fullHistory = this.getFullHistory();\r\n        let changes = [];\r\n        fullHistory.forEach((o, i) => {\r\n            if (i == 0)\r\n                return;\r\n            changes.push(Store.getChangeLog(fullHistory[i - 1], o));\r\n        });\r\n        return changes.join(\"\\n------------\\n\");\r\n    }\r\n}\r\nexport default Store;\r\n//# sourceMappingURL=Store.js.map"]}