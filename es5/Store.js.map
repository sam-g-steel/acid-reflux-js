{"version":3,"sources":["../es2016/Store.js"],"names":["Store","_boundParents","maxHistoryLength","onChangeCallbacks","__anyChange","state","__time","Date","now","stateHistory","concat","length","slice","stateParent","push","index","indexOf","splice","keys","intersection","Object","newState","forEach","key","setState","fowardState","parent","historyMode","oldState","assign","changes","getChangeList","trimHistory","o","property","newProperty","oldProperty","_triggerChangeCallbacks","fowardToBoundStates","callback","undefined","console","error","callbackList","pull","newValue","oldValue","fullHistory","getFullHistory","i","getChangeLog","join","isNew","log","map"],"mappings":"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","file":"Store.js","sourcesContent":["/**\r\n * Created by sam_g on 2/7/2017.\r\n */\r\nimport _ from 'lodash';\r\nimport areEqual from 'fbjs/lib/areEqual';\r\n/** Simple data store with history recording and on change callbacks */\r\nexport class Store {\r\n    constructor() {\r\n        this._boundParents = [];\r\n        this.maxHistoryLength = 32;\r\n        /** @private {function[]} */\r\n        this.onChangeCallbacks = {\r\n            __anyChange: []\r\n        };\r\n        /** @property {object} [state={}] state - An object that represents the present state */\r\n        this.state = {};\r\n        /** @private */\r\n        this.state.__time = Date.now();\r\n        /** @private An array of states from the first to the last, excluding the present state */\r\n        this.stateHistory = [];\r\n    }\r\n    /**\r\n     * Get an array of states from the first to the last\r\n     * @return {object[]} An array of states\r\n     */\r\n    getFullHistory() {\r\n        return _.concat(this.stateHistory, [this.state]);\r\n    }\r\n    trimHistory(length = 32) {\r\n        this.stateHistory = this.stateHistory.slice(-length);\r\n    }\r\n    bindState(stateParent) {\r\n        this._boundParents.push(stateParent);\r\n    }\r\n    unbindState(stateParent) {\r\n        var index = this._boundParents.indexOf(stateParent);\r\n        if (index > -1) {\r\n            this._boundParents.splice(index, 1);\r\n        }\r\n    }\r\n    fowardState(stateParent) {\r\n        let keys = _.intersection(Object.keys(stateParent.state), Object.keys(this.state));\r\n        let newState = {};\r\n        keys.forEach(key => newState[key] = this.state[key]);\r\n        stateParent.setState(newState);\r\n    }\r\n    fowardToBoundStates() {\r\n        this._boundParents.forEach(parent => this.fowardState(parent));\r\n    }\r\n    /**\r\n     * Get the previous state of the store\r\n     * @return {object} previous state\r\n     */\r\n    getPreviousState() {\r\n        let index = this.stateHistory.length - 1;\r\n        return this.stateHistory[index];\r\n    }\r\n    /**\r\n     * Set the store's state and optionally save the last state to history\r\n     * @param {object} newState\r\n     * @param {boolean} historyMode\r\n     * @example <caption>Set state and record previous state to history</caption>\r\n     * myStore.setState({userName: \"John Doe\"});\r\n     * @example <caption>Set state and forget about recording previous state to history</caption>\r\n     * myStore.setState({userName: \"Billy Bob\", false});\r\n     */\r\n    setState(newState, historyMode = true) {\r\n        // Save the old state\r\n        let oldState = this.state;\r\n        // Update the state\r\n        this.state = _.assign({}, oldState, newState);\r\n        let changes = Store.getChangeList(oldState, this.state);\r\n        this.trimHistory(this.maxHistoryLength);\r\n        // Loop through list of changes and trigger their respective callbacks\r\n        changes.forEach((o) => {\r\n            // Get the name of the changed property\r\n            let { property } = o;\r\n            // Get the new and old values of the property\r\n            let newProperty = this.state[property];\r\n            let oldProperty = oldState[property];\r\n            // Trigger the property's callback\r\n            this._triggerChangeCallbacks(property, newProperty, oldProperty);\r\n        });\r\n        if (changes.length) {\r\n            //\r\n            this.state.__time = Date.now();\r\n            if (historyMode == true) {\r\n                this.stateHistory.push(oldState);\r\n            }\r\n            this._triggerChangeCallbacks(\"__anyChange\", this.state, oldState);\r\n            this.fowardToBoundStates();\r\n        }\r\n    }\r\n    /**\r\n     * Subscribe to changes in the state\r\n     * @param {function(newValue: *, oldValue: *)} callback\r\n     * @param {string} property - Name of the property to watch\r\n     * @example <caption>Trigger callback when userName is updated</caption>\r\n     * myStore.subscribeToChanges((newVal)=>{ console.log(\"userName changed to...\", newVal)}, \"userName\");\r\n     */\r\n    subscribeToChanges(callback, property = \"__anyChange\") {\r\n        if (this.onChangeCallbacks[property] == undefined)\r\n            this.onChangeCallbacks[property] = [];\r\n        if (typeof callback != \"function\") {\r\n            console.error(\"Callback given is not a function as expected\");\r\n        }\r\n        else {\r\n            this.onChangeCallbacks[property].push(callback);\r\n        }\r\n    }\r\n    /**\r\n     * Remove subscription to changes in the state\r\n     * @param {function} callback\r\n     * @param {string} property - Name of the property to unsubscribe from\r\n     */\r\n    unSubscribeToChanges(callback, property = \"__anyChange\") {\r\n        let callbackList = this.onChangeCallbacks[property];\r\n        if (callbackList == undefined)\r\n            return;\r\n        this.onChangeCallbacks[property] = _.pull(callbackList, callback);\r\n    }\r\n    /**\r\n     *\r\n     * @param {object} oldState\r\n     * @param {object} newState\r\n     * @return {Array}\r\n     */\r\n    static getChangeList(oldState, newState) {\r\n        // Loop through state properties looking for changes\r\n        let changes = [];\r\n        for (let property in newState) {\r\n            let newProperty = newState[property];\r\n            let oldProperty = oldState[property];\r\n            if (property == \"__time\")\r\n                continue;\r\n            // Generate change list\r\n            if (!areEqual(newProperty, oldProperty)) {\r\n                changes.push({\r\n                    property: property,\r\n                    isNew: oldProperty == undefined || oldProperty == null\r\n                });\r\n            }\r\n        }\r\n        return changes;\r\n    }\r\n    /**\r\n     *\r\n     * @param {object} oldState\r\n     * @param {object} newState\r\n     * @return {string}\r\n     */\r\n    static getChangeLog(oldState, newState) {\r\n        let changes = this.getChangeList(oldState, newState);\r\n        let log = changes.map((o) => {\r\n            if (o.isNew)\r\n                return `Added new property \"${o.property}\"`;\r\n            else\r\n                return `Changed value of \"${o.property}\"`;\r\n        });\r\n        return log.join(\"\\n\");\r\n    }\r\n    _triggerChangeCallbacks(property, newValue, oldValue) {\r\n        if (!this.onChangeCallbacks[property])\r\n            return;\r\n        this.onChangeCallbacks[property].forEach((callback) => callback(newValue, oldValue, property));\r\n    }\r\n    getChangeLog() {\r\n        let fullHistory = this.getFullHistory();\r\n        let changes = [];\r\n        fullHistory.forEach((o, i) => {\r\n            if (i == 0)\r\n                return;\r\n            changes.push(Store.getChangeLog(fullHistory[i - 1], o));\r\n        });\r\n        return changes.join(\"\\n------------\\n\");\r\n    }\r\n}\r\nexport default Store;\r\n//# sourceMappingURL=Store.js.map"]}